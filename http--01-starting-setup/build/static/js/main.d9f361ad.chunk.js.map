{"version":3,"sources":["components/Post/Post.js","axios.js","containers/Blog/Posts/Posts.js","containers/Blog/NewPost/NewPost.js","containers/Blog/FullPost/FullPost.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["withRouter","props","console","log","react_default","a","createElement","className","onClick","clicked","title","author","instance","axios","create","baseURL","defaults","headers","common","interceptors","request","use","error","Promise","reject","Posts","state","posts","selectedPostId","_this2","this","axiosinstance","get","then","response","updatedPosts","data","slice","map","post","Object","objectSpread","setState","catch","id","_this3","style","textAlign","react_router_dom","to","key","components_Post_Post","postSelectedHandler","Component","NewPost","body","postDataHandler","_this","type","value","onChange","event","target","rows","content","FullPost","loadedPost","deletePostHandler","delete","match","params","Blog","exact","activeClassName","pathname","url","hash","search","react_router","path","component","App","containers_Blog_Blog","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d9f361ad.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport './Post.css';\n\nconst Post = (props) => {\n\n    console.log(props);\n\n    return (\n        <article className=\"Post\" onClick={props.clicked}>\n            <h1>{props.title}</h1>\n            <div className=\"Info\">\n                <div className=\"Author\">{props.author}</div>\n            </div>\n        </article>\n    )\n};\n\nexport default withRouter(Post);","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com'\r\n})\r\n\r\ninstance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE';\r\n\r\ninstance.interceptors.request.use(request => {\r\n    console.log(request);\r\n    return request; //important otherwise the intercptors blocks\r\n}, error => {\r\n    console.log(error);\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default instance;","import React, {Component} from 'react';\r\nimport Post from '../../../components/Post/Post';\r\nimport axiosinstance from \"../../../axios\";\r\nimport './Posts.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass Posts extends Component {\r\n\r\n    state = {\r\n        posts: [],\r\n        selectedPostId: null,\r\n        error: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        axiosinstance.get('/posts')\r\n            .then(response => {\r\n                const posts = response.data.slice(94, 110);\r\n                const updatedPosts = posts.map(post => {\r\n                    return {\r\n                        ...post,\r\n                        author: 'Max'\r\n                    }\r\n                });\r\n\r\n                this.setState({posts: updatedPosts});\r\n                console.log(response);\r\n            })\r\n            .catch(error => {\r\n                this.setState({error: true});\r\n            });\r\n    }\r\n\r\n    postSelectedHandler(id) {\r\n\r\n        this.setState({selectedPostId: id});\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let posts = <p style={{textAlign: 'center'}}>Something went wrong</p>;\r\n        if (!this.state.error)\r\n            posts = this.state.posts.map(post => {\r\n                return (\r\n                    <Link to={'/' + post.id} key={post.id}>\r\n                        <Post\r\n                            title={post.title} author={post.author}\r\n                            clicked={() => this.postSelectedHandler(post.id)}/>;\r\n                    </Link>\r\n                )\r\n\r\n            });\r\n\r\n        return (\r\n            <section className=\"Posts\">\r\n                {posts}\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Posts;\r\n\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport './NewPost.css';\n\nclass NewPost extends Component {\n    state = {\n        title: '',\n        body: '',\n        author: 'Max'\n    }\n\n    componentDidMount () {\n        console.log(this.props);\n    }\n\n    postDataHandler = () => {\n        const data = {\n            title: this.state.title,\n            body: this.state.body,\n            author: this.state.author\n\n        };\n\n        axios.post('/posts', data)\n            .then(response => {\n                console.log(response);\n\n            })\n    }\n\n    render () {\n        return (\n            <div className=\"NewPost\">\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" value={this.state.title} onChange={(event) => this.setState({title: event.target.value})} />\n                <label>Content</label>\n                <textarea rows=\"4\" value={this.state.content} onChange={(event) => this.setState({body: event.target.value})} />\n                <label>Author</label>\n                <select value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}>\n                    <option value=\"Max\">Max</option>\n                    <option value=\"Manu\">Manu</option>\n                </select>\n                <button onClick={this.postDataHandler}>Add Post</button>\n            </div>\n        );\n    }\n}\n\nexport default NewPost;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport './FullPost.css';\n\nclass FullPost extends Component {\n\n    state = {\n        loadedPost: null\n    }\n\n     deletePostHandler = () =>  {\n\n         console.log(this.state.loadedPost);\n         console.log(this.props.id);\n        axios.delete('/posts/' + this.props.id)\n            .then(response => {\n                console.log(response);\n            });\n\n    };\n\n\n\n\n    componentDidMount () {\n\n        console.log(this.props);\n        if (this.props.match.params.id) {\n            if (!this.state.loadedPost || (this.state.loadedPost &&  this.state.loadedPost.id !== this.props.match.params.id))\n            axios.get('https://jsonplaceholder.typicode.com/posts/' + this.props.match.params.id)\n                .then(response => {\n                    this.setState({loadedPost: response.data});\n                    }\n                )\n        }\n    }\n    render() {\n\n        let post = <p style={{textAlign: 'center'}}>Please select Post</p>;\n        if (this.props.id) {\n             post = <p style={{textAlign: 'center'}}>Loading...</p>;\n        }\n\n        if (this.state.loadedPost) {\n\n            post = (\n                <div className=\"FullPost\">\n                    <h1>{this.state.loadedPost.title}</h1>\n                    <p>{this.state.loadedPost.body}</p>\n                    <div className=\"Edit\">\n                        <button onClick={this.deletePostHandler} className=\"Delete\">Delete</button>\n                    </div>\n                </div>\n            );\n        }\n\n        return post;\n\n    }\n}\n\nexport default FullPost;","import React, {Component} from 'react';\n//import axios from 'axios';\n\n\nimport './Blog.css';\nimport Posts from './Posts/Posts';\nimport NewPost from './NewPost/NewPost';\nimport FullPost from './FullPost/FullPost';\nimport {Route, NavLink, Switch, withRouter} from 'react-router-dom';\n\nclass Blog extends Component {\n\n\n    render() {\n\n\n        return (\n            <div className='Blogs'>\n                <header>\n                    <nav>\n                        <ul>\n                            {/*<li><a href=\"/\">Home</a></li>*/}\n                            {/*<li><a href=\"/new-post\">New Post</a></li>*/}\n                            <li><NavLink to=\"/\" exact activeClassName=\"my-active\"> Home</NavLink></li>\n                            {/*<li><Link to=\"/new-post\">New Post</Link></li>*/}\n                            <li><NavLink to={{\n                                //pathname:'/new-post',\n                                pathname: this.props.match.url + 'new-post',\n                                hash: '#submit',\n                                search: '?quick-submit=true'\n                            }}>New Post</NavLink></li>\n                        </ul>\n                    </nav>\n                </header>\n                {/*<Route path=\"/\" exact render={() => <h1>Home</h1>} />*/}\n                {/*<Route path=\"/hallo\"  render={() => <h1>Home2</h1>} />*/}\n                <Switch>\n                    <Route path=\"/\" exact component={Posts}/>\n                    <Route path=\"/new-post\" exact component={NewPost}/>\n                    <Route path=\"/:id\" exact component={FullPost}/>\n                </Switch>\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Blog);","import React, {Component} from 'react';\nimport {BrowserRouter} from 'react-router-dom';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <Blog/>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';\n//axios.defaults.headers.common['Authorization'] = 'AUTH TOKEN123';\naxios.defaults.headers.post['Content-Type'] = 'application/jsonN';\n\n\naxios.interceptors.request.use(request => {\n    console.log(request);\n    return request; //important otherwise the intercptors blocks\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n    console.log(response);\n    return response; //important otherwise the intercptors blocks\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}